#image: docker:stable
#image: docker:19.03.1
image: docker:20.10.22

# When using dind, it's wise to use the overlayfs driver for
# improved performance.
variables:
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULES: recursive
    # This is used to connect the docker-client intalled into 'php:latest' image, to docker daemon
    DOCKER_HOST: tcp://docker:2375/
    # https://gitlab.rm.ingv.it/help/ci/pipelines/settings.md
    GIT_STRATEGY: clone
    # BUG!!! - Remove this (DOCKER_TLS_CERTDIR: "") when solved!!! - https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
    DOCKER_TLS_CERTDIR: ""
    #
    OAS_BASEDIR: "public/api/0.0.2"
    OAS_FILENAME: "openapi.yaml"
    #
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
    #
    DOCKER_IMAGE_TAG_TMP: gitlab-ci-${CI_COMMIT_REF_NAME}

services:
    # Remeber to set 'privileged = true' into the runner 'config.toml' file (es on hgp5: /srv/gitlab-runner/config/config.toml)
    #- docker:dind
    - docker:20.10.12-dind
    - command:["--registry-mirror", "https://mirror.gcr.io"]

stages:
  - dockerhub
  - pre_check
  - build
  - test
  - rebuild_without_dev
  - push
  - clean_dockerhub
  - all_stages
  - pages
  - deploy

include:
  - remote: 'https://raw.githubusercontent.com/vlauciani/gitlabci-include-for-dockerhub-rate-limit/main/dockerhub-rate-limit.yml'
  - remote: 'https://raw.githubusercontent.com/vlauciani/gitlabci-include-for-api-oas-checker/main/api-oas-checker.yml'

before_script:
    # Print project name
    - echo ${CI_PROJECT_NAME}
    # DockerHub login
    - echo ${CI_DOCKERHUB_REGISTRY_TOKEN} | docker login -u ${CI_DOCKERHUB_REGISTRY_USER} --password-stdin
    #
    - date
    - uname -a
    - echo ${OAS_DIR}
    # Update repo
    - apk update
    - apk upgrade   
    #
    - docker -v
    - ALPINE_VERSION=$( cat /etc/os-release | grep "VERSION_ID" | awk -F"=" '{print $2}' )
    - > 
      if [[ "${CI_COMMIT_REF_NAME}" == "develop" ]]; then
        FILE_DOCKER_COMPOSE="docker-compose.dev.yml";
      else
        FILE_DOCKER_COMPOSE="docker-compose.prod.yml";
      fi
    - echo FILE_DOCKER_COMPOSE=${FILE_DOCKER_COMPOSE}
    - echo DOCKER_IMAGE_TAG_TMP=${DOCKER_IMAGE_TAG_TMP}
    - DANTE_VERSION_WITHOUT_V=$( cat VERSION | sed "s/^v//" )
    - echo DANTE_VERSION_WITHOUT_V=${DANTE_VERSION_WITHOUT_V}

# From: https://www.docker.com/blog/checking-your-current-docker-pull-rate-limits-and-status/
dockerhub-rate-limit:
    stage: dockerhub
    variables:
      INCLUDE_DOCKERHUB_REGISTRY_USER: ${CI_DOCKERHUB_REGISTRY_USER}
      INCLUDE_DOCKERHUB_REGISTRY_PSW: ${CI_DOCKERHUB_REGISTRY_TOKEN}

api-oas-checker:
    stage: pre_check
    variables:
      INCLUDE_OAS_BASEDIR: ${OAS_BASEDIR}
      INCLUDE_OAS_FILENAME: ${OAS_FILENAME}

validate_oa3:
    stage: pre_check
    script:
        - ls -l $(pwd)/public/api/0.0.2 # to be removed when https://github.com/italia/api-oas-checker/issues/60 is solved
        
        # This command should work, but the command 'spectral lint --version' doesn't work: https://github.com/stoplightio/spectral/issues/1483
        #  then I wrote a workaround 
        #- docker run --rm -v $(pwd)/public/api/0.0.3:/tmp stoplight/spectral lint -r https://italia.github.io/api-oas-checker/spectral.yml "/tmp/openapi.yaml"
        
        # This is the workaround 
        - docker run --rm --entrypoint=sh -v $(pwd)/public/api/0.0.2:/tmp stoplight/spectral:5.9.1 -c "spectral lint -r https://italia.github.io/api-oas-checker/spectral.yml /tmp/openapi.yaml"

validate_publiccode:
    stage: pre_check
    script:
        - docker run --rm -v $(pwd)/publiccode.yml:/publiccode_folder/publiccode.yml italia/publiccode-parser-go /publiccode_folder/publiccode.yml

validate_version_number_and_date:
    stage: pre_check
    script:
        - apk add --no-cache bash git
        - ./${CI_PROJECT_NAME}/scripts/validate_version_number_and_date.sh

Build:
  stage: build
  tags:
    # Runners:
    # 1) 'laradock' runner is working on 'albus.int.ingv.it' valentino's MAC.
    # 2) 'test' runner is working on 'docker.int.ingv.it' server.
    # 3) 'hgp5_runner' runner is working on 'hgp5.int.ingv.it' server.
    # 4) 'sqlx2-srvr_runner' runner is working on 'sqlx2-srvr.int.ingv.it' server.
    - sqlx2-srvr_runner
  # !!! Attenzione !!!, per sfruttare la cache il runner deve essere lo stessi in quanto la cache e' 'local' e quindi e' sull'host.  
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/
      - .env
  script:
    # Configure Laravel ENV
    - cp ./.env.example ./.env
    - cat ./.env

    # Set version
    - export APOLLO_VERSION=${DOCKER_IMAGE_TAG_TMP}
    - echo APOLLO_VERSION=${APOLLO_VERSION}
    # Build and up
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} build --no-cache --pull --progress=plain
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} up -d --remove-orphans
    # Configure
    #- docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo bash -c 'ls -la'
    #- docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo bash -c 'chown -R application:application /app'
    #- docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo bash -c 'ls -la'
    #- docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo bash -c 'id -u; id -g'        
    #- docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo composer install
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo php artisan key:generate
    # Push to DockerHub
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} push
    # Clean all
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} down -v
    - ls -l
    - docker images

PHPUnit Test:
  stage: test
  tags: 
    # Runners:
    # 1) 'laradock' runner is working on 'albus.int.ingv.it' valentino's MAC.
    # 2) 'test' runner is working on 'docker.int.ingv.it' server.
    # 3) 'hgp5_runner' runner is working on 'hgp5.int.ingv.it' server.
    # 4) 'sqlx2-srvr_runner' runner is working on 'sqlx2-srvr.int.ingv.it' server.
    - sqlx2-srvr_runner
  # !!! Attenzione !!!, per sfruttare la cache il runner deve essere lo stessi in quanto la cache e' 'local' e quindi e' sull'host.  
  cache: 
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/
      - .env
  script:
    - export APOLLO_VERSION=${DOCKER_IMAGE_TAG_TMP}
    - echo APOLLO_VERSION=${APOLLO_VERSION}
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} up -d --remove-orphans

    # Check 'docker-in-docker' is started
    #while [[ $(docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker -v 2>&1 >/dev/null) ]] && (( ${COUNT} < ${COUNT_LIMIT} )); do
    - >
      COUNT=1;
      COUNT_LIMIT=20;
      while [[ $(docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker -v 2>&1 >/dev/null) ]]; do \
        echo " ${COUNT}/${COUNT_LIMIT} - waiting docker-in-docker starts." ;
        COUNT=$(( ${COUNT} + 1)) ;
        sleep 1 ;
      done 
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker images

    # Install 'dev' packages (removing option '--no-dev') to execute tests
    - > 
      if [[ "${CI_COMMIT_REF_NAME}" == "main" ]]; then
        docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo composer install;
      fi

    # Check hyp2000 is started
    - >
      COUNT=1;
      COUNT_LIMIT=10;
      while [[ $(docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker images | grep hyp2000 2>&1 >/dev/null) ]] && (( ${COUNT} < ${COUNT_LIMIT} )); do
        echo " ${COUNT}/${COUNT_LIMIT} - waiting hyp2000 starts." ;
        COUNT=$(( ${COUNT} + 1));
        sleep 1;
      done;
      if (( ${COUNT} >= ${COUNT_LIMIT} )); then
        exit 1;
      fi
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker images

    # Check pyml is started
    - >
      COUNT=1
      COUNT_LIMIT=10
      while [[ $(docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker images | grep pyml 2>&1 >/dev/null) ]] && (( ${COUNT} < ${COUNT_LIMIT} )); do
        echo " ${COUNT}/${COUNT_LIMIT} - waiting pyml starts." ;
        COUNT=$(( ${COUNT} + 1));
        sleep 1;
      done
      if (( ${COUNT} >= ${COUNT_LIMIT} )); then
        exit 1;
      fi
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo docker images

    # START - Tests
    - ls -l
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo bash -c 'php artisan route:list'
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo php artisan test --stop-on-failure
    - docker compose -f docker-compose.yml -f ${FILE_DOCKER_COMPOSE} exec -T apollo vendor/bin/phpstan
    # END - Tests 

build_laravel:
    stage: all_stages
    tags:
        # Runners:
        # 1) 'laradock' runner is working on 'albus.int.ingv.it' valentino's MAC.
        # 2) 'test' runner is working on 'docker.int.ingv.it' server.
        # 3) 'hgp5_runner' runner is working on 'hgp5.int.ingv.it' server.
        # 4) 'sqlx2-srvr_runner' runner is working on 'sqlx2-srvr.int.ingv.it' server.
        - sqlx2-srvr_runner
        
    cache:
        key: ${CI_COMMIT_REF_SLUG}-composer
        paths:
            - vendor/ 

    script:
        # Install common dependecies
        - apk add --no-cache bash vim python3 py-pip python3-dev libffi-dev openssl-dev gcc libc-dev make git
        - pip install --upgrade pip
        - pip install --no-cache-dir docker-compose 
        
        # Configure Laravel ENV
        - cp ./.env.example ./.env
        - cat ./.env
        - whoami
        
        # Remove file to re-build 'laradock'
        - if [ -f laradock-${CI_PROJECT_NAME}/.env ]; then rm -v laradock-${CI_PROJECT_NAME}/.env ; fi
        
        # Configure laradock
        - ./${CI_PROJECT_NAME}/configure_laradock.sh
        - cat ./laradock-${CI_PROJECT_NAME}/.env

        # Start Laradock
        - cd laradock-${CI_PROJECT_NAME}
        - docker-compose build --no-cache --pull nginx php-fpm redis workspace laravel-horizon ;
        - docker-compose up -d nginx php-fpm redis workspace laravel-horizon
        - docker-compose exec -T workspace composer install
        - docker-compose exec -T workspace composer update
        - docker-compose exec -T workspace php artisan key:generate 

        # Install hyp2000 submodule
        - docker-compose exec -T php-fpm sh -c "if docker image ls | grep -q hyp2000 ; then echo \" nothing to do\"; else cd hyp2000 && docker build --tag hyp2000:ewdevgit -f DockerfileEwDevGit .; fi"

        # Install PyML submodule
        - docker-compose exec -T php-fpm sh -c "if docker image ls | grep -q pyml ; then echo \" nothing to do\"; else cd pyml && docker build --tag pyml .; fi"

        # START - Tests
        # Artisan
        - docker-compose exec -T workspace bash -c "php artisan route:list"
        # PHPUnit
        - docker-compose exec -T workspace php artisan test --testsuite=Feature --stop-on-failure
        # PHPStan
        - docker-compose exec -T workspace vendor/bin/phpstan
        # END - Tests
    artifacts:
        when: always
        paths:
            - storage/logs
        expire_in: 1 day






    
pages:
  stage: pages
  only:
    - main
    - develop
  script:
    - apk add --no-cache git rsync && rm -rf /var/cache/apk/*
    - export NOW=$(date +%Y%m%dx%H%M%S)
    - mkdir pages_tmp

    - git fetch
    - cp pages/index.html.template public/index.html

    # from: openapitools/openapi-generator-cli
    - for BRANCH in main ; do
        git checkout ${BRANCH} ;
        for CLIENT_LANGUAGE in java python html2 ; do

          FILE_NAME="apollo-${CLIENT_LANGUAGE}-client-v$(cat VERSION)" ;
          BRANCH_STRUPPER=$( echo "${BRANCH}" | awk '{print toupper($0)}' ) ;
          CLIENT_LANGUAGE_STRUPPER=$( echo "${CLIENT_LANGUAGE}" | awk '{print toupper($0)}' ) ;
          echo "****** FILE_NAME=${FILE_NAME} ******" ;

          docker run
            --rm
            -v $(pwd)/pages_tmp:/output
            -v $(pwd)/public/api/0.0.2:/input
            openapitools/openapi-generator-cli
            generate
            -i /input/openapi.yaml
            --artifact-id ${CLIENT_LANGUAGE}-openapi-generator-cli-apollo
            --api-package org.ingv.apollo.api
            --model-package org.ingv.apollo.model
            --group-id org.ingv.apollo
            --artifact-version $(cat VERSION)
            -g ${CLIENT_LANGUAGE}
            -o /output/${FILE_NAME} &&

          cd pages_tmp/ ;
          if [[ "${CLIENT_LANGUAGE}" == "html2" ]] ; then
            cp -R ${FILE_NAME} ../public/ ; 
          else
            tar -czf ../public/${FILE_NAME}.tar.gz ${FILE_NAME} ;

            if [[ "${CLIENT_LANGUAGE}" == "python" ]] && [ ! -d ${CLIENT_LANGUAGE} ]; then 
              git clone https://gitlab+deploy-token-118:glpat-oSYmtZrsqDz1vGiCMPrB@gitlab.rm.ingv.it/caravel/codegen/apollo-${CLIENT_LANGUAGE}.git &&
              git config --global user.name "GitLab CI" &&
              git config --global user.email "valentino.lauciani@ingv.it" ;
            elif [[ "${CLIENT_LANGUAGE}" == "java" ]] && [ ! -d ${CLIENT_LANGUAGE} ]; then 
              git clone https://gitlab+deploy-token-117:glpat-FhrmFhJG7fYiKXzsGG2M@gitlab.rm.ingv.it/caravel/codegen/apollo-${CLIENT_LANGUAGE}.git &&
              git config --global user.name "GitLab CI" &&
              git config --global user.email "valentino.lauciani@ingv.it" ;
            fi ;

            cd apollo-${CLIENT_LANGUAGE}/ &&
            git switch ${BRANCH} &&
            cd .. &&
            echo "---1---" &&
            ls -al ${FILE_NAME}/ &&
            echo "---2---" &&
            ls -al apollo-${CLIENT_LANGUAGE}/ &&
            echo "---3---" &&
            rsync -avh --delete --exclude '.git/' --exclude '.gitlab-ci.yml' ${FILE_NAME}/ apollo-${CLIENT_LANGUAGE}/ &&
            echo "---4---" &&
            cd apollo-${CLIENT_LANGUAGE}/ &&
            echo "---5---" &&
            git status &&
            echo "---6---" &&
            git add . &&
            echo "---7---" &&
            git commit -m "Update" &&
            echo "---8---" &&
            git branch -avv &&
            echo "---9---" &&
            git push origin ${BRANCH} ;
            cd .. ;
          fi ;
          cd .. ;

          sed -i'' -e "s/__LINK_${BRANCH_STRUPPER}_${CLIENT_LANGUAGE_STRUPPER}__/${FILE_NAME}/g" public/*.html ;
        done ;
      done

    - sed -i'' -e "s/__NOW__/${NOW}/g" public/*.html
    #- cp pages/* public/
  artifacts:
    expire_in: 1 week
    paths:
      - public/

